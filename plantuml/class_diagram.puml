@startuml
class ast.NodeTransformer {
}

abstract class Handler {
    next : Handler
    set_next(h: Handler)
    handle(tree: ast.Module)
}
class ClassHandler {
    next : Handler
    set_next(h: Handler)
    handle(tree: ast.Module)
    visit_ClassDef(n: node)
}

class FunctionHandler {
    next : Handler
    set_next(h: Handler)
    handle(tree: ast.Module)
    visit_FunctionDef(n: node)
}

class AssignHandler {
    next : Handler
    set_next(h: Handler)
    handle(tree: ast.Module)
    visit_Assign(n: node)
}

class CallHandler {
    next : Handler
    set_next(h: Handler)
    handle(tree: ast.Module)
    visit_Call(n: node)
}

class ConstantHandler {
    next : Handler
    set_next(h: Handler)
    handle(tree: ast.Module)
    visit_Constant(n: node)
}

class Obfuscator {
    chain : Handler
    storage: DefinitionStorage
    modules: list<ast.Module>
    initialize_chain()
    load_modules()
    gather_definitions()
    obfuscate()
}

class DefinitionTracker {
    _instance : DefinitionTracker
    definitions : dict
    get_instance() : DefinitionTracker
    add_class(class_: dict)
    get_class(class_: dict) : dict
    _name_class(class_: str) : str
    _get_ascii_sum(string: str) : int
    add_function(function: dict)
    get_function(function: str)
    _name_function(function: str) : str
    add_variable(variable: str)
    get_variable(variable: str) : str
    _name_variable(variable: str) : str
    clear_definitions()
}

ast.NodeTransformer <|-- Handler
Handler <|-- ClassHandler
Handler <|-- FunctionHandler
Handler <|-- AssignHandler
Handler <|-- CallHandler
Handler <|-- ConstantHandler
Obfuscator "1" *-- Handler
@enduml
